apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: zitadel
  namespace: security
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  interval: 30m
  chart:
    spec:
      chart: zitadel
      version: 8.1.0
      sourceRef:
        kind: HelmRepository
        name: zitadel
        namespace: flux-system
  values:
    zitadel:
      # The ZITADEL config under configmapConfig is written to a Kubernetes ConfigMap
      # See all defaults here:
      # https://github.com/zitadel/zitadel/blob/main/cmd/defaults.yaml
      configmapConfig:
        Log:
          Level: info
          Formatter:
            Format: text
        FirstInstance:
          Org:
            Machine:
              Machine:
                Username: zitadel-admin-sa
                Name: Admin
              MachineKey:
                ExpirationDate: "2026-01-01T00:00:00Z"
                # Type: 1 means JSON. This is currently the only supported machine key type.
                Type: 1
        Database:
          postgres:
            Host: postgres-default-rw.database.svc.cluster.local
            Port: 5432
            Database: zitadel
            User:
              SSL:
                Mode: disable
            Admin:
              SSL:
                Mode: disable
        LogStore:
          Access:
            Stdout:
              Enabled: false

        ExternalDomain: &host auth.${SECRET_DOMAIN_2}
        # specifies if ZITADEL is exposed externally through TLS
        # this must be set to true even if TLS is not enabled on ZITADEL itself
        # but TLS traffic is terminated on a reverse proxy
        # !!! Changing this after initial setup breaks your system !!!
        ExternalSecure: true
        ExternalPort: 443
        TLS:
          # if enabled, ZITADEL will serve all traffic over TLS (HTTPS and gRPC)
          # you must then also provide a private key and certificate to be used for the connection
          # either directly or by a path to the corresponding file
          Enabled: false
        WebAuthNName: ZITADEL
        # The Secret containing the root CA Certificate at key ca.crt needed for establishing secure database connections
      dbSslRootCrtSecret:
      # The Secret containing the client CA Certificate and key at tls.crt and tls.key needed for establishing secure database connections
      dbSslClientCrtSecret:
      masterkeySecretName: zitadel-secret

      # Enabling this will create a debug pod that can be used to inspect the ZITADEL configuration and run zitadel commands using the zitadel binary.
      # This is useful for debugging and troubleshooting.
      # After the debug pod is created, you can open a shell within the pod.
      # See more instructions by printing the pods logs using kubectl logs [pod name].
      debug:
        enabled: true
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "1"
    replicaCount: 1
    image:
      repository: ghcr.io/zitadel/zitadel
      tag: v2.58.0
      pullPolicy: IfNotPresent

    # Additional environment variables
    env:
      - name: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
        valueFrom:
          secretKeyRef:
            name: zitadel-secret
            key: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
      - name: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: zitadel-secret
            key: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
        valueFrom:
          secretKeyRef:
            name: zitadel-secret
            key: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            name: zitadel-secret
            key: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD

    service:
      type: ClusterIP
      port: 8080
      protocol: http2
      annotations: {}

    ingress:
      enabled: true
      className: "nginx"
      annotations:
        external-dns.alpha.kubernetes.io/target: "ingress-cf.${SECRET_DOMAIN_2}"
      hosts:
        - host: *host
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - *host

    initJob:
      # Once ZITADEL is installed, the initJob can be disabled.
      enabled: false

    readinessProbe:
      enabled: true
      initialDelaySeconds: 0
      periodSeconds: 5
      failureThreshold: 3

    livenessProbe:
      enabled: true
      initialDelaySeconds: 0
      periodSeconds: 5
      failureThreshold: 3

    startupProbe:
      enabled: true
      periodSeconds: 1
      failureThreshold: 30

    metrics:
      enabled: false
      serviceMonitor:
        enabled: false
